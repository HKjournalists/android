<project
    name="wzgj"
    default="deploy" >

    <!-- ANT环境变量 -->

    <property environment="env" />
    <!-- 使用第三方的ant包，使ant支持for循环 -->

    <taskdef resource="net/sf/antcontrib/antcontrib.properties" >

        <classpath>

            <pathelement location="${env.ANT_HOME}/lib/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>
    <!-- 应用名称 -->

    <property
        name="target-dir"
        value="E:/项目文档/查违章/android市场渠道包" />

    <property
        name="appName"
        value="${ant.project.name}" />
    <!-- SDK目录(获取操作系统环境变量ANDROID_SDK_HOME的值) -->


    <!-- 版本 -->

    <property
        name="version"
        value="v3.0.0.0" />

    <property
        name="sdk-folder"
        value="E:/AndroidSDK/adt-bundle-windows-x86_64-20131030/sdk" />
    <!-- SDK指定平台目录 -->

    <property
        name="sdk-platform-folder"
        value="${sdk-folder}/platforms/android-18" />
    <!-- SDK中tools目录 -->

    <property
        name="sdk-tools"
        value="${sdk-folder}/tools" />
    <!-- SDK指定平台中tools目录 -->

    <property
        name="sdk-platform-tools"
        value="${sdk-folder}/build-tools/19.1.0" />

    <!-- 使用到的命令(当前系统为windows,如果系统为linux,可将.bat文件替换成相对应的命令) -->

    <property
        name="aapt"
        value="${sdk-platform-tools}/aapt" />

    <property
        name="aidl"
        value="${sdk-platform-tools}/aidl" />

    <property
        name="dx"
        value="${sdk-platform-tools}/dx.bat" />

    <property
        name="jarsigner"
        value="${env.JAVA_HOME}/bin/jarsigner" />

    <property
        name="zipalign"
        value="${sdk-tools}/zipalign.exe" />

    <!-- 编译需要的jar; 如果项目使用到地图服务则需要maps.jar -->

    <property
        name="android-jar"
        value="${sdk-platform-folder}/android.jar" />
    
    <!-- 第三方library -->
    <property
        name="library-dir1"
        value="E:/cardview"/>
    <property
        name="library-dir2"
        value="E:/gridlayout"/>
    <property
        name="library-dir3"
        value="E:/recyclerview"/>

    <!--  -->

    <property
        name="channelname"
        value="" />

    <property
        name="channelkey"
        value="" />

    <property
        name="channelcode"
        value="" />
    <!-- 渠道名:渠道号 -->
  <!-- <property
        name="key"
        value="豌豆荚#wandoujia:30001" />  --> 
      
    <property
        name="key"
        value="小米#xiaomi:30002,360#360:30003,91#91:30004,应用宝#yyb:30005,百度#baidu:30006,联想#lenovo:30007,华为#huawei:30008,木蚂蚁#mumayi:30009,应用汇#yyh:30010,机锋#jifeng:30011,安卓市场#hiapk:30012,uc#uc:30014,baidutg#baidutg:30017,豌豆荚推广#wandoujia-t:30029,oppo#keke:30030,淘宝助手#taobao:30033,金立商店#jinli:30037,通用包#common:30099,百度市场推广#baiducpd:30039,360推广#360tg:30040,应用宝换量#yybsdk:30041,应用宝推广#yybtg:30042,粉丝通#fensi:30043,魅族#meizu:30044,百度市场CPT#baiducpt:30045,360市场CPD#360cpd:30046,360市场CPT#360cpt:30047,应用宝现金流#yybxjl:30048,百度移动网盟#baiduwm:30049,百度搜索推广01#baidutg01:30050,百度搜索推广02#baidutg02:30051,百度搜索推广03#baidutg03:30052,百度搜索推广04#baidutg04:30053,百度搜索推广05#baidutg05:30054,金山猎豹#jinshanliebao:30055,cpa广告01#ggcpa01:30057,cpa广告02#ggcpa02:30058,cpc广告01#ggcpc01:30059,cpc广告02#ggcpc02:30060,cpt广告01#ggcpt01:30061,cpt广告02#ggcpt02:30062,广点通微信#weixin-gdt:30063,百度贴吧#baidutb:30064,神马搜索#shenmass:30065,新浪新闻#xinlangxw:30066,今日头条#jinritt:30067,搜狗搜索#sougouss:30068,乐商店#lenovocpd:30069,91桌面#91zhuomian:30070,扎客zaker#zaker:30073,搜狐#sohu:30074,QQ浏览器#qqbrowser:30075,微信公众号广告#weixingg:30076,微信官网#weixingw:30077,官方分享#appfenxiang:30078,91市场CPD#91cpd:30079,安卓市场CPD#hiapkcpd:30080,陌陌#momo:30081,今日头条大图#jinrittdt:30082,广点通测试#guangdaintong:30018,视频广告#shipin:30083,凤凰网#fenghuang:30084,微信广告主#weixinggz:30085,cpa广告03#ggcpa03:30086,cpa广告04#ggcpa04:30087,cpa广告05#ggcpa05:30088,中国气象频道#qixiang:30089,支付宝服务窗#alipay:30090,官网#default:10000" />
     
    <!-- 编译aidl文件所需的预处理框架文件framework.aidl -->

    <property
        name="framework-aidl"
        value="${sdk-platform-folder}/framework.aidl" />
    <!-- 清单文件 -->

    <property
        name="manifest-xml"
        value="AndroidManifest.xml" />
    <!-- 源文件目录 -->

    <property
        name="resource-dir"
        value="res" />

    <property
        name="asset-dir"
        value="assets" />
    <!-- java源文件目录 -->

    <property
        name="srcdir"
        value="src" />

    <property
        name="srcdir-ospath"
        value="${basedir}/${srcdir}" />
    <!-- 外部类库所在目录 -->

    <property
        name="external-lib"
        value="libs" />

    <property
        name="external-lib-ospath"
        value="${basedir}/${external-lib}" />

    <!-- 循环打包 -->

    <target name="deploy" >

        <foreach
            delimiter=","
            list="${key}"
            param="nameandchannel"
            target="modify_manifest" >
        </foreach>
    </target>

    <target name="modify_manifest" >

        <!-- 获取渠道名字 -->

        <propertyregex
            input="${nameandchannel}"
            override="true"
            property="channelname"
            regexp="(.*)#"
            select="\1" />

        <!-- 获取渠道号码 -->

        <propertyregex
            input="${nameandchannel}"
            override="true"
            property="channelkey"
            regexp="#(.*):"
            select="\1" />

        <!-- 获取渠道代号 -->

        <propertyregex
            input="${nameandchannel}"
            override="true"
            property="channelcode"
            regexp=":(.*)"
            select="\1" />
        <!-- 正则匹配替换渠道号 -->

        <replaceregexp
            byline="false"
            encoding="UTF-8"
            flags="g" >

            <regexp pattern="meta-data android:name=&quot;UMENG_CHANNEL&quot; android:value=&quot;(.*)&quot;" />

            <substitution expression="meta-data android:name=&quot;UMENG_CHANNEL&quot; android:value=&quot;android_${channelkey}&quot;" />

            <fileset
                dir=""
                includes="AndroidManifest.xml" />
        </replaceregexp>
        
        <replaceregexp
            byline="false"
            encoding="UTF-8"
            flags="g" >

            <regexp pattern="meta-data android:name=&quot;TD_CHANNEL_ID&quot; android:value=&quot;(.*)&quot;" />

            <substitution expression="meta-data android:name=&quot;TD_CHANNEL_ID&quot; android:value=&quot;android_${channelkey}&quot;" />

            <fileset
                dir=""
                includes="AndroidManifest.xml" />
        </replaceregexp>

        <replaceregexp
            byline="false"
            encoding="utf-8"
            flags="g" >

            <regexp pattern="public static final String CLIENT_APP_KEY = &quot;(.*)&quot;" />

            <substitution expression="public static final String CLIENT_APP_KEY = &quot;${channelcode}&quot;" />

            <fileset
                dir="${srcdir}"
                includes="**/KplusConstants.java" />
        </replaceregexp>

        <replaceregexp
            byline="false"
            encoding="utf-8"
            flags="g" >

            <regexp pattern="strategy.setAppChannel\(&quot;(.*)&quot;\);" />

            <substitution expression="strategy.setAppChannel\(&quot;android_${channelkey}&quot;\);" />

            <fileset
                dir="${srcdir}"
                includes="**/LogoActivity.java" />
        </replaceregexp>

        <antcall target="zipalign" />
    </target>

    <!-- 初始化工作 -->

    <target name="init" >

        <echo>
目录初始化....
        </echo>
        <!-- 生成R文件的相对目录 -->
        <var
            name="outdir-gen"
            value="gen" />
        <!-- 编译后的文件放置目录 -->
        <var
            name="outdir-bin"
            value="${channelname}" />
        <!-- 生成class目录 -->
        <var
            name="outdir-classes"
            value="${outdir-bin}" />
        <var
            name="outdir-classes-ospath"
            value="${basedir}/${outdir-classes}" />
        <!-- classes.dex相关变量 -->
        <var
            name="dex-file"
            value="classes.dex" />
        <var
            name="dex-path"
            value="${outdir-bin}/${dex-file}" />
        <var
            name="dex-ospath"
            value="${basedir}/${dex-path}" />
        <!-- 经过aapt生成的资源包文件 -->
        <var
            name="resources-package"
            value="${outdir-bin}/resources.ap_" />
        <var
            name="resources-package-ospath"
            value="${basedir}/${resources-package}" />
        <!-- 未认证apk包 -->
        <var
            name="out-unsigned-package"
            value="${outdir-bin}/${appName}-unsigned.apk" />
        <var
            name="out-unsigned-package-ospath"
            value="${basedir}/${out-unsigned-package}" />
        <!-- 证书文件 -->
        <var
            name="keystore-file"
            value="${basedir}/microbox" />
        <!-- 已认证apk包 -->
        <var
            name="out-signed-package"
            value="${outdir-bin}/${appName}-${channelkey}.apk" />
        <var
            name="out-signed-package-ospath"
            value="${basedir}/${out-signed-package}" />
        <!-- 已优化认证apk包 -->
        <var
            name="out-signed-zipaligned-package"
            value="${outdir-bin}/${appName}-${channelkey}-${version}.apk" />
        <var
            name="out-signed-zipaligned-package-ospath"
            value="${basedir}/${out-signed-zipaligned-package}" />
        <delete dir="${outdir-bin}" />
        <mkdir dir="${outdir-bin}" />
    </target>

    <!-- 根据工程中的资源文件生成R.java文件 -->
    <target
        name="gen-R"
        depends="init" >

        <echo>
生成R.java文件....
        </echo>

        <exec
            executable="${aapt}"
            failonerror="true" >
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-gen}" />
            <arg value="-M" />
            <arg value="${manifest-xml}" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-S" />
            <arg value="${library-dir1}/res" />
            <arg value="-S" />
            <arg value="${library-dir2}/res" />
            <arg value="-S" />
            <arg value="${library-dir3}/res" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="--auto-add-overlay" /> <!-- 这个重要，覆盖资源，不然报错-->
        </exec>
        <exec
            executable="${aapt}"
            failonerror="true" >
            <arg value="package" />
            <arg value="-m" />
            <arg value="--auto-add-overlay" />
            <arg value="-J" />
            <arg value="${outdir-gen}" />
            <arg value="-M" />
            <arg value="${library-dir1}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-S" />
            <arg value="${library-dir1}/res" />
            <arg value="-S" />
            <arg value="${library-dir2}/res" />
            <arg value="-S" />
            <arg value="${library-dir3}/res" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
        <exec
            executable="${aapt}"
            failonerror="true" >
            <arg value="package" />
            <arg value="-m" />
            <arg value="--auto-add-overlay" />
            <arg value="-J" />
            <arg value="${outdir-gen}" />
            <arg value="-M" />
            <arg value="${library-dir2}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-S" />
            <arg value="${library-dir1}/res" />
            <arg value="-S" />
            <arg value="${library-dir2}/res" />
            <arg value="-S" />
            <arg value="${library-dir3}/res" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
        <exec
            executable="${aapt}"
            failonerror="true" >
            <arg value="package" />
            <arg value="-m" />
            <arg value="--auto-add-overlay" />
            <arg value="-J" />
            <arg value="${outdir-gen}" />
            <arg value="-M" />
            <arg value="${library-dir3}/AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-S" />
            <arg value="${library-dir1}/res" />
            <arg value="-S" />
            <arg value="${library-dir2}/res" />
            <arg value="-S" />
            <arg value="${library-dir3}/res" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>
    

    <!-- 编译aidl文件 -->
    <target name="aidl" depends="gen-R" >
        <echo>编译aidl文件....</echo>
        <apply
            executable="${aidl}"
            failonerror="true" >
            <!-- 指定预处理文件 -->
            <arg value="-p${framework-aidl}" />
            <!-- aidl声明的目录 -->
            <arg value="-I${srcdir}" />
            <!-- 目标文件目录 -->
            <arg value="-o${outdir-gen}" />
            <!-- 指定哪些文件需要编译 -->
            <fileset dir="${srcdir}" >
                <include name="**/*.aidl" />
            </fileset>
        </apply>
    </target>

    <!-- 将工程中的java源文件编译成class文件 -->

    <target name="compile" depends="aidl" >
        <echo>java源文件编译成class文件....</echo>
        <javac
            bootclasspath="${android-jar}"
            destdir="${outdir-classes}"
            encoding="utf-8"
            source="1.6"
            verbose="false"  >
            <src path="${basedir}/src" /><!-- 工程源码-->
            <src path="${outdir-gen}" /><!-- 生成的class文件全部保存到bin/classes目录下 -->
            <compilerarg line="-encoding utf-8 " />
            <classpath>
                <fileset
                    dir="${external-lib}" includes="*.jar" />
                <fileset
                    dir="${library-dir1}/libs" includes="*.jar" />
                <fileset
                    dir="${library-dir2}/libs" includes="*.jar" />
                <fileset
                    dir="${library-dir3}/libs" includes="*.jar" />
            </classpath>
        </javac>
    </target>

    <!-- 将.class文件转化成.dex文件 -->
    <target name="dex" depends="compile" >
        <echo>将.class文件转化成.dex文件....</echo>
        <exec executable="${dx}" failonerror="true"  >
            <arg value="--dex" />
            <!-- 输出文件 -->
            <arg value="--output=${dex-ospath}" />
            <!-- 要生成.dex文件的源classes和libraries -->
            <arg value="${outdir-classes-ospath}" />
            <arg value="${external-lib-ospath}" />
            <arg value="${library-dir1}/libs" />
            <arg value="${library-dir2}/libs" />
            <arg value="${library-dir3}/libs" />
        </exec >
    </target>

    <!-- 将资源文件放进输出目录 -->
    <target name="package-res-and-assets" >
        <echo>将资源文件放进输出目录....</echo>
        <exec executable="${aapt}" failonerror="true" >
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="${manifest-xml}" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-S"/>
            <arg value="${library-dir1}/res"/>
            <arg value="-S"/>
            <arg value="${library-dir2}/res"/>
            <arg value="-S"/>
            <arg value="${library-dir3}/res"/>
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
            <arg value="--auto-add-overlay" />
        </exec>
    </target>

    <!-- 打包成未签证的apk -->
    <target name="package" depends="dex, package-res-and-assets" >
        <echo>打包成未签证的apk....</echo>
        <java
            classname="com.android.sdklib.build.ApkBuilderMain"
            classpath="E:/AndroidSDK/adt-bundle-windows-x86_64-20131030/sdk/tools/lib/sdklib.jar" >
            <arg value="${out-unsigned-package-ospath}" />
            <arg value="-u" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir-ospath}" />
            <arg value="-rj" />
            <arg value="${external-lib-ospath}" />
            <arg value="-nf" />
            <arg value="${external-lib-ospath}" />
        </java>
    </target>

    <!-- 对apk进行签证 -->
    <target name="jarsigner"  depends="package" >
        <echo>Packaging signed apk for release...</echo>
        <exec executable="${jarsigner}" failonerror="true" >
            <arg value="-verbose" />            
            <!-- 如果你的JDK是7，需要添加下面四行的代码，如果是6，就可以不需要，否则，最终的APK安装会出现“该文件签名有问题，无法安装” -->
            <arg value="-digestalg" />
            <arg value="SHA1" />
            <arg value="-sigalg" />
            <arg value="MD5withRSA" />
             
            <arg value="-keystore" />
            <arg value="${keystore-file}" />
            <arg value="-storepass" />
            <arg value="7758520" />
            <arg value="-keypass" />
            <arg value="7758520" />
            <arg value="-signedjar" />
            <arg value="${out-signed-package-ospath}" />
            <arg value="${out-unsigned-package-ospath}" />
            <!-- 不要忘了证书的别名 -->
            <arg value="microbox" />
        </exec>
    </target>

    <!-- 发布 -->
    <target name="release" depends="jarsigner" >
        <!-- 删除未签证apk -->
        <delete file="${out-unsigned-package-ospath}" />
        <echo>APK is released. path:${out-signed-package-ospath}</echo>
    </target>
    <!-- 打包的应用程序进行优化 -->
    <target name="zipalign" depends="release" >
        <exec executable="${zipalign}" failonerror="true" >
            <arg value="-v" />
            <arg value="4" />
            <arg value="${out-signed-package-ospath}" />
            <arg value="${out-signed-zipaligned-package-ospath}" />
        </exec>

        <move file="${out-signed-zipaligned-package-ospath}" todir="${target-dir}/${outdir-bin}"/>

        <delete dir="${outdir-bin}" />
        
    </target>

</project>